
#include "pch.h"
#include "File.h"
#include "Exception.h"

using namespace IO;
using namespace IO::Details;

std::wstring Path::Combine(
	_In_ const std::wstring& path1,
	_In_ const std::wstring& path2
	)
{
	WCHAR combinedPath[MAX_PATH + 1] = {};
	if (PathCombine(combinedPath, path1.c_str(), path2.c_str()) == nullptr)
	{
		throw std::runtime_error("Failed to combine file paths");
	}

	return combinedPath;
}

bool File::Exists(
	_In_ const std::wstring& path
	)
{
	WIN32_FILE_ATTRIBUTE_DATA attributeData = { };
	return ::GetFileAttributesEx(path.c_str(), GetFileExInfoStandard, &attributeData) != FALSE && 
		!(attributeData.dwFileAttributes & (FILE_ATTRIBUTE_DIRECTORY | FILE_ATTRIBUTE_DEVICE));
}

bool Directory::Exists(
	_In_ const std::wstring& path
	)
{
	WIN32_FILE_ATTRIBUTE_DATA attributeData = {};
	return ::GetFileAttributesEx(path.c_str(), GetFileExInfoStandard, &attributeData) != FALSE &&
		(attributeData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY);
}

Directory::DirectoryEnumerator Directory::EnumerateDirectories(
	_In_ const std::wstring& path
	)
{
	auto globPath = Path::Combine(path, L"*");
	return DirectoryEnumerator(std::move(globPath));
}

Directory::FileEnumerator Directory::EnumerateFiles(
	_In_ const std::wstring& path
	)
{
	auto globPath = Path::Combine(path, L"*");
	return FileEnumerator(std::move(globPath));
}
